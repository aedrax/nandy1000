// Testbench
// Test    |  sel  |    a     |    b     |    c     |    d     |    e     |    f     |    g     |    h     |   out    |
// Test 0  |  000  | 00000000 | 00000000 | 00000000 | 00000000 | 00000000 | 00000000 | 00000000 | 00000000 | 00000000 |
// Test 1  |  001  | 00000000 | 00000000 | 00000000 | 00000000 | 00000000 | 00000000 | 00000000 | 00000000 | 00000000 |
// Test 2  |  010  | 00000000 | 00000000 | 00000000 | 00000000 | 00000000 | 00000000 | 00000000 | 00000000 | 00000000 |
// Test 3  |  011  | 00000000 | 00000000 | 00000000 | 00000000 | 00000000 | 00000000 | 00000000 | 00000000 | 00000000 |
// Test 4  |  100  | 00000000 | 00000000 | 00000000 | 00000000 | 00000000 | 00000000 | 00000000 | 00000000 | 00000000 |
// Test 5  |  101  | 00000000 | 00000000 | 00000000 | 00000000 | 00000000 | 00000000 | 00000000 | 00000000 | 00000000 |
// Test 6  |  110  | 00000000 | 00000000 | 00000000 | 00000000 | 00000000 | 00000000 | 00000000 | 00000000 | 00000000 |
// Test 7  |  111  | 00000000 | 00000000 | 00000000 | 00000000 | 00000000 | 00000000 | 00000000 | 00000000 | 00000000 |
// Test 8  |  000  | 00110100 | 01000101 | 01010110 | 01100111 | 01111000 | 10001001 | 10011010 | 10101011 | 00110100 |
// Test 9  |  001  | 00110100 | 01000101 | 01010110 | 01100111 | 01111000 | 10001001 | 10011010 | 10101011 | 01000101 |
// Test 10 |  010  | 00110100 | 01000101 | 01010110 | 01100111 | 01111000 | 10001001 | 10011010 | 10101011 | 01010110 |
// Test 11 |  011  | 00110100 | 01000101 | 01010110 | 01100111 | 01111000 | 10001001 | 10011010 | 10101011 | 01100111 |
// Test 12 |  100  | 00110100 | 01000101 | 01010110 | 01100111 | 01111000 | 10001001 | 10011010 | 10101011 | 01111000 |
// Test 13 |  101  | 00110100 | 01000101 | 01010110 | 01100111 | 01111000 | 10001001 | 10011010 | 10101011 | 10001001 |
// Test 14 |  110  | 00110100 | 01000101 | 01010110 | 01100111 | 01111000 | 10001001 | 10011010 | 10101011 | 10011010 |
// Test 15 |  111  | 00110100 | 01000101 | 01010110 | 01100111 | 01111000 | 10001001 | 10011010 | 10101011 | 10101011 |

`include "Mux8way8bit.v"

module Mux8way8bitTest;

  reg [2:0] sel;
  reg [7:0] a;
  reg [7:0] b;
  reg [7:0] c;
  reg [7:0] d;
  reg [7:0] e;
  reg [7:0] f;
  reg [7:0] g;
  reg [7:0] h;
  wire [7:0] out;
  reg [7:0] expected;
  reg allPassed;
  
  // Instantiate design under test
  Mux8way8bit MUX8WAY8BIT(.out(out), .select(sel), .inA(a), .inB(b), .inC(c), .inD(d),
                                           .inE(e), .inF(f), .inG(g), .inH(h));

  initial begin
    // Dump waves
    $dumpfile("dump.vcd");
    $dumpvars(1);
    allPassed = 1;    
    $display("Begin Test: MUX8WAY8BIT");
  
    $write("Test 0: ");
    test(3'b000, 8'b00000000, 8'b00000000, 8'b00000000, 8'b00000000, 8'b00000000,
         8'b00000000, 8'b00000000, 8'b00000000, 8'b00000000);

    $write("Test 1: ");
    test(3'b001, 8'b00000000, 8'b00000000, 8'b00000000, 8'b00000000, 8'b00000000,
         8'b00000000, 8'b00000000, 8'b00000000, 8'b00000000);

    $write("Test 2: ");
    test(3'b010, 8'b00000000, 8'b00000000, 8'b00000000, 8'b00000000, 8'b00000000,
         8'b00000000, 8'b00000000, 8'b00000000, 8'b00000000);

    $write("Test 3: ");
    test(3'b011, 8'b00000000, 8'b00000000, 8'b00000000, 8'b00000000, 8'b00000000,
         8'b00000000, 8'b00000000, 8'b00000000, 8'b00000000);

    $write("Test 4: ");
    test(3'b100, 8'b00000000, 8'b00000000, 8'b00000000, 8'b00000000, 8'b00000000,
         8'b00000000, 8'b00000000, 8'b00000000, 8'b00000000);

    $write("Test 5: ");
    test(3'b101, 8'b00000000, 8'b00000000, 8'b00000000, 8'b00000000, 8'b00000000,
         8'b00000000, 8'b00000000, 8'b00000000, 8'b00000000);

    $write("Test 6: ");
    test(3'b110, 8'b00000000, 8'b00000000, 8'b00000000, 8'b00000000, 8'b00000000,
         8'b00000000, 8'b00000000, 8'b00000000, 8'b00000000);

    $write("Test 7: ");
    test(3'b111, 8'b00000000, 8'b00000000, 8'b00000000, 8'b00000000, 8'b00000000,
         8'b00000000, 8'b00000000, 8'b00000000, 8'b00000000);

    $write("Test 8: ");
    test(3'b000, 8'b00110100, 8'b01000101, 8'b01010110, 8'b01100111, 8'b01111000,
         8'b10001001, 8'b10011010, 8'b10101011, 8'b00110100);

    $write("Test 9: ");
    test(3'b001, 8'b00110100, 8'b01000101, 8'b01010110, 8'b01100111, 8'b01111000,
         8'b10001001, 8'b10011010, 8'b10101011, 8'b01000101);

    $write("Test 10: ");
    test(3'b010, 8'b00110100, 8'b01000101, 8'b01010110, 8'b01100111, 8'b01111000,
         8'b10001001, 8'b10011010, 8'b10101011, 8'b01010110);

    $write("Test 11: ");
    test(3'b011, 8'b00110100, 8'b01000101, 8'b01010110, 8'b01100111, 8'b01111000,
         8'b10001001, 8'b10011010, 8'b10101011, 8'b01100111);

    $write("Test 12: ");
    test(3'b100, 8'b00110100, 8'b01000101, 8'b01010110, 8'b01100111, 8'b01111000,
         8'b10001001, 8'b10011010, 8'b10101011, 8'b01111000);

    $write("Test 13: ");
    test(3'b101, 8'b00110100, 8'b01000101, 8'b01010110, 8'b01100111, 8'b01111000,
         8'b10001001, 8'b10011010, 8'b10101011, 8'b10001001);

    $write("Test 14: ");
    test(3'b110, 8'b00110100, 8'b01000101, 8'b01010110, 8'b01100111, 8'b01111000,
         8'b10001001, 8'b10011010, 8'b10101011, 8'b10011010);

    $write("Test 15: ");
    test(3'b111, 8'b00110100, 8'b01000101, 8'b01010110, 8'b01100111, 8'b01111000,
         8'b10001001, 8'b10011010, 8'b10101011, 8'b10101011);

    
    #100
    $display("Finished Test: MUX8WAY8BIT");
    if (allPassed)
      $display("All tests PASSED");
    else
      $display("Some test has FAILED");
  end
  
  task test(input [2:0] t_sel, input [7:0] t_a, t_b, t_c, t_d, t_e, t_f, t_g, t_h, t_expected);
    sel = t_sel;
    a = t_a;
    b = t_b;
    c = t_c;
    d = t_d;
    e = t_e;
    f = t_f;
    g = t_g;
    h = t_h;
    expected = t_expected;
    #1 $write("Select:%0h, A:%0h, B:%0h, C:%0h, D:%0h, E:%0h, F:%0h, G:%0h, H:%0h, Output:%0h, Expected:%0h ",
             sel, a, b, c, d, e, f, g, h, out, expected);
    if (out === expected)
      $display("[PASSED]");
    else begin
      $display("[FAILED]");
      allPassed <= 0;
    end
  endtask

endmodule
